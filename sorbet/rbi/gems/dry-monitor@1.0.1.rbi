# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-monitor` gem.
# Please instead update this file by running `bin/tapioca gem dry-monitor`.


# source://dry-monitor//lib/dry/monitor/version.rb#3
module Dry
  class << self
    # source://dry-configurable/1.3.0/lib/dry/configurable.rb#11
    def Configurable(**options); end

    # source://dry-core/1.1.0/lib/dry/core.rb#52
    def Equalizer(*keys, **options); end

    # source://dry-struct/1.8.0/lib/dry/struct.rb#30
    def Struct(attributes = T.unsafe(nil), &block); end

    # source://dry-types/1.8.3/lib/dry/types.rb#253
    def Types(*namespaces, default: T.unsafe(nil), **aliases); end
  end
end

# source://dry-monitor//lib/dry/monitor/version.rb#4
module Dry::Monitor
  include ::Dry::Core::Constants
  extend ::Dry::Core::Extensions

  class << self
    # @api private
    #
    # source://dry-monitor//lib/dry/monitor.rb#24
    def loader; end
  end
end

# source://dry-monitor//lib/dry/monitor/notifications.rb#7
Dry::Monitor::CLOCK = T.let(T.unsafe(nil), Dry::Monitor::Clock)

# @api public
#
# source://dry-monitor//lib/dry/monitor/clock.rb#6
class Dry::Monitor::Clock
  # @api private
  # @return [Clock] a new instance of Clock
  #
  # source://dry-monitor//lib/dry/monitor/clock.rb#8
  def initialize(unit: T.unsafe(nil)); end

  # @api public
  #
  # source://dry-monitor//lib/dry/monitor/clock.rb#20
  def current; end

  # @api public
  #
  # source://dry-monitor//lib/dry/monitor/clock.rb#13
  def measure; end
end

# source://dry-monitor//lib/dry/monitor/logger.rb#7
class Dry::Monitor::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://dry-monitor//lib/dry/monitor/logger.rb#12
  def initialize(*args); end
end

# source://dry-monitor//lib/dry/monitor/logger.rb#8
Dry::Monitor::Logger::DEFAULT_FORMATTER = T.let(T.unsafe(nil), Proc)

# source://dry-monitor//lib/dry/monitor/notifications.rb#9
class Dry::Monitor::Notifications
  include ::Dry::Core::Constants
  include ::Dry::Events::Publisher::InstanceMethods
  extend ::Dry::Events::Publisher::ClassMethods

  # @return [Notifications] a new instance of Notifications
  #
  # source://dry-monitor//lib/dry/monitor/notifications.rb#15
  def initialize(id, clock: T.unsafe(nil)); end

  # Returns the value of attribute clock.
  #
  # source://dry-monitor//lib/dry/monitor/notifications.rb#13
  def clock; end

  # Returns the value of attribute id.
  #
  # source://dry-monitor//lib/dry/monitor/notifications.rb#13
  def id; end

  # source://dry-monitor//lib/dry/monitor/notifications.rb#28
  def instrument(event_id, payload = T.unsafe(nil), &block); end

  # source://dry-monitor//lib/dry/monitor/notifications.rb#20
  def start(event_id, payload); end

  # source://dry-monitor//lib/dry/monitor/notifications.rb#24
  def stop(event_id, payload); end
end

# source://dry-monitor//lib/dry/monitor/version.rb#5
Dry::Monitor::VERSION = T.let(T.unsafe(nil), String)
