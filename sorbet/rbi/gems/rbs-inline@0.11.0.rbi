# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbs-inline` gem.
# Please instead update this file by running `bin/tapioca gem rbs-inline`.


# source://rbs-inline//lib/rbs/inline/version.rb#3
module RBS
  class << self
    # source://rbs/3.9.4/lib/rbs.rb#69
    def logger; end

    # source://rbs/3.9.4/lib/rbs.rb#66
    def logger_level; end

    # source://rbs/3.9.4/lib/rbs.rb#78
    def logger_level=(level); end

    # source://rbs/3.9.4/lib/rbs.rb#67
    def logger_output; end

    # source://rbs/3.9.4/lib/rbs.rb#73
    def logger_output=(val); end

    # source://rbs/3.9.4/lib/rbs.rb#83
    def print_warning; end
  end
end

# source://rbs-inline//lib/rbs/inline/version.rb#4
module RBS::Inline; end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#5
module RBS::Inline::AST; end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#6
module RBS::Inline::AST::Annotations; end

# `#[TYPE, ..., TYPE]`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#362
class RBS::Inline::AST::Annotations::Application < ::RBS::Inline::AST::Annotations::Base
  # @return [Application] a new instance of Application
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#366
  def initialize(tree, source); end

  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#387
  def complete?; end

  # : Array[Types::t]?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#363
  def types; end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#110
class RBS::Inline::AST::Annotations::Base
  # @return [Base] a new instance of Base
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#117
  def initialize(tree, source); end

  # : CommentLines
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#111
  def source; end

  # : Tree
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#112
  def tree; end
end

# `@rbs &block: METHOD-TYPE` or `@rbs &block: ? METHOD-TYPE`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#203
class RBS::Inline::AST::Annotations::BlockType < ::RBS::Inline::AST::Annotations::Base
  # @return [BlockType] a new instance of BlockType
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#213
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#208
  def comment; end

  # : Symbol?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#204
  def name; end

  # : Types::Block?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#206
  def type; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#210
  def type_source; end
end

# `@rbs class Foo`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#739
class RBS::Inline::AST::Annotations::ClassDecl < ::RBS::Inline::AST::Annotations::Base
  include ::RBS::Inline::AST::Annotations::Utils

  # @return [ClassDecl] a new instance of ClassDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#749
  def initialize(tree, comments); end

  # : TypeName?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#740
  def name; end

  # : RBS::AST::Declarations::Class::Super?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#744
  def super_class; end

  # : Array[RBS::AST::TypeParam]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#742
  def type_params; end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#352
class RBS::Inline::AST::Annotations::Dot3Assertion < ::RBS::Inline::AST::Annotations::Base
  # @return [Dot3Assertion] a new instance of Dot3Assertion
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#354
  def initialize(tree, source); end
end

# `@rbs` **x: T
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#199
class RBS::Inline::AST::Annotations::DoubleSplatParamType < ::RBS::Inline::AST::Annotations::SpecialVarTypeAnnotation; end

# `# @rbs!` annotation
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#586
class RBS::Inline::AST::Annotations::Embedded < ::RBS::Inline::AST::Annotations::Base
  # @return [Embedded] a new instance of Embedded
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#590
  def initialize(tree, source); end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#587
  def content; end
end

# `# @rbs generic [type param]`
#
# ```rb
# # @rbs generic X
# # @rbs generic in Y
# # @rbs generic unchecked out Z < String -- Comment here
# ```
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#561
class RBS::Inline::AST::Annotations::Generic < ::RBS::Inline::AST::Annotations::Base
  include ::RBS::Inline::AST::Annotations::Utils

  # @return [Generic] a new instance of Generic
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#571
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#566
  def comment; end

  # TypeParam object or `nil` if syntax error
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#564
  def type_param; end
end

# `# @rbs inherits T`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#427
class RBS::Inline::AST::Annotations::Inherits < ::RBS::Inline::AST::Annotations::Base
  # @return [Inherits] a new instance of Inherits
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#432
  def initialize(tree, source); end

  # : Array[Types::t]?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#429
  def args; end

  # : TypeName?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#428
  def super_name; end
end

# `@rbs @foo: T` or `@rbs self.@foo: T`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#283
class RBS::Inline::AST::Annotations::IvarType < ::RBS::Inline::AST::Annotations::Base
  # @return [IvarType] a new instance of IvarType
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#293
  def initialize(tree, source); end

  # : bool
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#288
  def class_instance; end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#290
  def comment; end

  # : Symbol
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#284
  def name; end

  # : Types::t?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#286
  def type; end
end

# `@rbs METHOD-TYPE``
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#600
class RBS::Inline::AST::Annotations::Method < ::RBS::Inline::AST::Annotations::Base
  # @return [Method] a new instance of Method
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#614
  def initialize(tree, source); end

  # : (Array[tree]) -> method_type?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#624
  def construct_method_types(children); end

  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#645
  def each_method_type; end

  # Returns the parsing error overload string
  #
  # Returns `nil` if no parsing error found.
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#666
  def error_source; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#611
  def method_type_source; end

  # @rbs! type method_type = [MethodType, method_type?] | String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#603
  def method_types; end

  # `true` if the method definition is overloading something
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#607
  def overloading; end

  # : MethodType?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#609
  def type; end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#308
class RBS::Inline::AST::Annotations::MethodTypeAssertion < ::RBS::Inline::AST::Annotations::Base
  # @return [MethodTypeAssertion] a new instance of MethodTypeAssertion
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#312
  def initialize(tree, source); end

  # : MethodType
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#309
  def method_type; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#319
  def type_source; end
end

# `@rbs module Foo`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#684
class RBS::Inline::AST::Annotations::ModuleDecl < ::RBS::Inline::AST::Annotations::Base
  include ::RBS::Inline::AST::Annotations::Utils

  # @return [ModuleDecl] a new instance of ModuleDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#694
  def initialize(tree, comments); end

  # : TypeName?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#685
  def name; end

  # : Array[RBS::AST::Declarations::Module::Self]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#689
  def self_types; end

  # : Array[RBS::AST::TypeParam]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#687
  def type_params; end
end

# `# @rbs module-self [MODULE_SELF]`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#511
class RBS::Inline::AST::Annotations::ModuleSelf < ::RBS::Inline::AST::Annotations::Base
  # @return [ModuleSelf] a new instance of ModuleSelf
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#517
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#514
  def comment; end

  # : Array[RBS::AST::Declarations::Module::Self]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#512
  def self_types; end
end

# `# @rbs override`
#
# Specify the method types as `...` (overriding super class method)
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#450
class RBS::Inline::AST::Annotations::Override < ::RBS::Inline::AST::Annotations::Base
  # @return [Override] a new instance of Override
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#452
  def initialize(tree, source); end
end

# `# @rbs %a{a} %a{a} ...`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#393
class RBS::Inline::AST::Annotations::RBSAnnotation < ::RBS::Inline::AST::Annotations::Base
  # @return [RBSAnnotation] a new instance of RBSAnnotation
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#397
  def initialize(tree, comments); end

  # : Array[RBS::AST::Annotation]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#408
  def annotations; end

  # : Array[String]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#394
  def contents; end
end

# `@rbs return: T`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#250
class RBS::Inline::AST::Annotations::ReturnType < ::RBS::Inline::AST::Annotations::Base
  # @return [ReturnType] a new instance of ReturnType
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#256
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#253
  def comment; end

  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#272
  def complete?; end

  # : Types::t?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#251
  def type; end
end

# `# @rbs skip`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#417
class RBS::Inline::AST::Annotations::Skip < ::RBS::Inline::AST::Annotations::Base
  # @return [Skip] a new instance of Skip
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#419
  def initialize(tree, source); end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#160
class RBS::Inline::AST::Annotations::SpecialVarTypeAnnotation < ::RBS::Inline::AST::Annotations::Base
  # @return [SpecialVarTypeAnnotation] a new instance of SpecialVarTypeAnnotation
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#170
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#165
  def comment; end

  # : Symbol?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#161
  def name; end

  # : Types::t?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#163
  def type; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#167
  def type_source; end
end

# `@rbs *x: T`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#195
class RBS::Inline::AST::Annotations::SplatParamType < ::RBS::Inline::AST::Annotations::SpecialVarTypeAnnotation; end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#340
class RBS::Inline::AST::Annotations::SyntaxErrorAssertion < ::RBS::Inline::AST::Annotations::Base
  # @return [SyntaxErrorAssertion] a new instance of SyntaxErrorAssertion
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#344
  def initialize(tree, source); end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#341
  def error_string; end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#324
class RBS::Inline::AST::Annotations::TypeAssertion < ::RBS::Inline::AST::Annotations::Base
  # @return [TypeAssertion] a new instance of TypeAssertion
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#328
  def initialize(tree, source); end

  # : Types::t
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#325
  def type; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#335
  def type_source; end
end

# `# @rbs use [USES]`
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#459
class RBS::Inline::AST::Annotations::Use < ::RBS::Inline::AST::Annotations::Base
  # @return [Use] a new instance of Use
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#463
  def initialize(tree, source); end

  # : Array[RBS::AST::Directives::Use::clause]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#460
  def clauses; end
end

# @rbs!
#   type t = VarType
#          | ReturnType
#          | Use
#          | Inherits
#          | Generic
#          | ModuleSelf
#          | Skip
#          | MethodTypeAssertion | TypeAssertion | SyntaxErrorAssertion | Dot3Assertion
#          | Application
#          | RBSAnnotation
#          | Override
#          | IvarType
#          | Embedded
#          | Method
#          | SplatParamType
#          | DoubleSplatParamType
#          | BlockType
#          | ModuleDecl
#          | ClassDecl
#        #  | Def
#        #  | AttrReader | AttrWriter | AttrAccessor
#        #  | Include | Extend | Prepend
#        #  | Alias
#
# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#32
module RBS::Inline::AST::Annotations::Utils
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#68
  def translate_super_class(type); end

  # Assumes the tree is generated through `#parse_module_name`
  #
  # Returns a type name, or `nil` if the tree is something invalid.
  #
  # @param tree -- A tree object that is generated through `#parse_module_name`
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#86
  def translate_type_name(tree); end

  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#34
  def translate_type_param(tree); end
end

# source://rbs-inline//lib/rbs/inline/ast/annotations.rb#123
class RBS::Inline::AST::Annotations::VarType < ::RBS::Inline::AST::Annotations::Base
  # @return [VarType] a new instance of VarType
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#131
  def initialize(tree, source); end

  # : String?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#128
  def comment; end

  # : () -> bool
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#151
  def complete?; end

  # : Symbol
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#124
  def name; end

  # : Types::t?
  #
  # source://rbs-inline//lib/rbs/inline/ast/annotations.rb#126
  def type; end
end

# CommentLines represents consecutive comments, providing a mapping from locations in `#string` to a pair of a comment and its offset
#
# The comments construct one String.
#
# ```ruby
# # Hello       <-- Comment1
# # World       <-- Comment2
# ```
#
# We want to get a String of comment1 and comment2, `"Hello\nWorld".
# And want to translate a location in the string into the location in comment1 and comment2.
#
# source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#18
class RBS::Inline::AST::CommentLines
  # @return [CommentLines] a new instance of CommentLines
  #
  # source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#22
  def initialize(comments); end

  # Translates the cursor index of `#string` into the cursor index of a specific comment object
  #
  # source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#38
  def comment_location(index); end

  # : Array[Prism::Comment]
  #
  # source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#19
  def comments; end

  # : Array[String]
  #
  # source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#26
  def lines; end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/ast/comment_lines.rb#30
  def string; end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#6
module RBS::Inline::AST::Declarations; end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#53
class RBS::Inline::AST::Declarations::Base; end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#261
class RBS::Inline::AST::Declarations::BlockDecl < ::RBS::Inline::AST::Declarations::Base
  # @return [BlockDecl] a new instance of BlockDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#270
  def initialize(node, comments); end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#264
  def comments; end

  # Members included in the declaration
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#267
  def members; end

  # : Annotations::ModuleDecl | Annotations::ClassDecl | nil
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#280
  def module_class_annotation; end

  # : Prism::BlockNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#262
  def node; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#276
  def start_line; end
end

# [Prism::ClassNode]
#
# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#93
class RBS::Inline::AST::Declarations::ClassDecl < ::RBS::Inline::AST::Declarations::ModuleOrClass
  include ::RBS::Inline::AST::Declarations::ConstantUtil

  # @return [ClassDecl] a new instance of ClassDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#103
  def initialize(node, comments, super_app); end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#110
  def class_name; end

  # Type application for super class
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#97
  def super_app; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#115
  def super_class; end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#174
class RBS::Inline::AST::Declarations::ConstantDecl < ::RBS::Inline::AST::Declarations::Base
  include ::RBS::Inline::AST::Declarations::ConstantUtil

  # @return [ConstantDecl] a new instance of ConstantDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#184
  def initialize(node, comments, assertion); end

  # : Annotations::TypeAssertion?
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#179
  def assertion; end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#178
  def comments; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#234
  def constant_name; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#211
  def literal_type; end

  # : Prism::ConstantWriteNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#177
  def node; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#238
  def start_line; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#192
  def type(default_type); end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#7
module RBS::Inline::AST::Declarations::ConstantUtil
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#10
  def type_name(node); end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#18
  def value_node(node); end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#339
class RBS::Inline::AST::Declarations::DataAssignDecl < ::RBS::Inline::AST::Declarations::Base
  include ::RBS::Inline::AST::Declarations::DataStructUtil
  extend ::RBS::Inline::AST::Declarations::ConstantUtil

  # @return [DataAssignDecl] a new instance of DataAssignDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#353
  def initialize(node, data_define_node, comments, type_decls); end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#346
  def comments; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#366
  def constant_name; end

  # : Prism::CallNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#350
  def data_define_node; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#386
  def each_attribute_argument(&block); end

  # : Prism::ConstantWriteNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#344
  def node; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#360
  def start_line; end

  # : Hash[Integer, Annotations::TypeAssertion]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#348
  def type_decls; end

  class << self
    # @return [Boolean]
    #
    # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#371
    def data_define?(node); end
  end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#298
module RBS::Inline::AST::Declarations::DataStructUtil
  # : Array[RBS::AST::Annotation]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#326
  def class_annotations; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#311
  def each_attribute(&block); end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#38
module RBS::Inline::AST::Declarations::Generics
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#40
  def type_params; end
end

# [Prism::ModuleNode]
#
# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#152
class RBS::Inline::AST::Declarations::ModuleDecl < ::RBS::Inline::AST::Declarations::ModuleOrClass
  include ::RBS::Inline::AST::Declarations::ConstantUtil

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#156
  def module_name; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#161
  def module_selfs; end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#57
class RBS::Inline::AST::Declarations::ModuleOrClass < ::RBS::Inline::AST::Declarations::Base
  # @return [ModuleOrClass] a new instance of ModuleOrClass
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#69
  def initialize(node, comments); end

  # Leading comment
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#62
  def comments; end

  # Members included in the declaration
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#65
  def members; end

  # The node that represents the declaration
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#59
  def node; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#88
  def start_line; end

  # Type parameters for the declaration
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#76
  def type_params; end
end

# [Prism::SingletonClassNode]
#
# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#244
class RBS::Inline::AST::Declarations::SingletonClassDecl < ::RBS::Inline::AST::Declarations::ModuleOrClass
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#245
  def visibility(def_member); end
end

# source://rbs-inline//lib/rbs/inline/ast/declarations.rb#393
class RBS::Inline::AST::Declarations::StructAssignDecl < ::RBS::Inline::AST::Declarations::Base
  include ::RBS::Inline::AST::Declarations::DataStructUtil
  extend ::RBS::Inline::AST::Declarations::ConstantUtil

  # @return [StructAssignDecl] a new instance of StructAssignDecl
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#407
  def initialize(node, struct_new_node, comments, type_decls); end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#400
  def comments; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#420
  def constant_name; end

  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#425
  def each_attribute_argument(&block); end

  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#452
  def keyword_init?; end

  # : Prism::ConstantWriteNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#398
  def node; end

  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#476
  def positional_init?; end

  # Returns `true` is annotation is given to make all attributes *readonly*
  #
  # Add `# @rbs %a{rbs-inline:readonly-attributes=true}` to the class to make all attributes `attr_reader`, instead of `attr_accessor`.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#504
  def readonly_attributes?; end

  # Returns `true` if annotation is given to make all `.new` arguments required
  #
  # Add `# @rbs %a{rbs-inline:new-args=required}` to the class to make all of the parameters required.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#515
  def required_new_args?; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#414
  def start_line; end

  # : Prism::CallNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#404
  def struct_new_node; end

  # : Hash[Integer, Annotations::TypeAssertion]
  #
  # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#402
  def type_decls; end

  class << self
    # @return [Boolean]
    #
    # source://rbs-inline//lib/rbs/inline/ast/declarations.rb#437
    def struct_new?(node); end
  end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#6
module RBS::Inline::AST::Members; end

# @rbs!
#   type ruby = RubyDef | RubyAlias | RubyMixin | RubyAttr | RubyPublic | RubyPrivate
#
#   type rbs = RBSIvar | RBSEmbedded
#
#   type t = ruby | rbs
#
# source://rbs-inline//lib/rbs/inline/ast/members.rb#14
class RBS::Inline::AST::Members::Base
  # @return [Base] a new instance of Base
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#18
  def initialize(location); end

  # : Prism::Location
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#15
  def location; end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#22
  def start_line; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#514
class RBS::Inline::AST::Members::RBSBase < ::RBS::Inline::AST::Members::Base; end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#557
class RBS::Inline::AST::Members::RBSEmbedded < ::RBS::Inline::AST::Members::RBSBase
  # @return [RBSEmbedded] a new instance of RBSEmbedded
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#564
  def initialize(comment, annotation); end

  # : Annotations::Embedded
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#558
  def annotation; end

  # : AnnotationParser::ParsingResult
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#560
  def comment; end

  # Returns the array of `RBS::AST` members
  #
  # Returns `RBS::ParsingError` when the `content` has syntax error.
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#575
  def members; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#517
class RBS::Inline::AST::Members::RBSIvar < ::RBS::Inline::AST::Members::RBSBase
  # @return [RBSIvar] a new instance of RBSIvar
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#524
  def initialize(comment, annotation); end

  # : Annotations::IvarType
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#518
  def annotation; end

  # : AnnotationParser::ParsingResult
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#520
  def comment; end

  # : RBS::AST::Members::InstanceVariable | RBS::AST::Members::ClassInstanceVariable | nil
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#531
  def rbs; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#315
class RBS::Inline::AST::Members::RubyAlias < ::RBS::Inline::AST::Members::RubyBase
  # @return [RubyAlias] a new instance of RubyAlias
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#321
  def initialize(node, comments); end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#317
  def comments; end

  # source://rbs-inline//lib/rbs/inline/ast/members.rb#336
  def new_name; end

  # : Prism::AliasMethodNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#316
  def node; end

  # source://rbs-inline//lib/rbs/inline/ast/members.rb#329
  def old_name; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#415
class RBS::Inline::AST::Members::RubyAttr < ::RBS::Inline::AST::Members::RubyBase
  # @return [RubyAttr] a new instance of RubyAttr
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#426
  def initialize(node, comments, visibility, assertion); end

  # : Annotations::TypeAssertion?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#419
  def assertion; end

  # Returns the type of the attribute
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#482
  def attribute_type; end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#417
  def comments; end

  # : Prism::CallNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#416
  def node; end

  # source://rbs-inline//lib/rbs/inline/ast/members.rb#437
  def rbs(default_type); end

  # : RBS::AST::Members::visibility?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#418
  def visibility; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#27
class RBS::Inline::AST::Members::RubyBase < ::RBS::Inline::AST::Members::Base; end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#30
class RBS::Inline::AST::Members::RubyDef < ::RBS::Inline::AST::Members::RubyBase
  # @return [RubyDef] a new instance of RubyDef
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#57
  def initialize(node, comments, visibility, singleton_instance, assertion); end

  # Returns `nil` if no `@rbs METHOD-TYPE` or `#:` annotation is given
  #
  # Returns an empty array if only `...` method type is given.
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#76
  def annotated_method_types; end

  # Assertion given at the end of the method name
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#50
  def assertion; end

  # : AST::Annotations::BlockType?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#306
  def block_type_annotation; end

  # : AnnotationParser::ParsingResult?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#32
  def comments; end

  # : Annotations::DoubleSplatParamType?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#137
  def double_splat_param_type_annotation; end

  # : Array[RBS::AST::Annotation]
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#283
  def method_annotations; end

  # Returns the name of the method
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#68
  def method_name; end

  # source://rbs-inline//lib/rbs/inline/ast/members.rb#162
  def method_overloads(default_type); end

  # : Prism::DefNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#31
  def node; end

  # : bool
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#145
  def overloading?; end

  # Returns the `@rbs override` annotation
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#298
  def override_annotation; end

  # : Types::t?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#97
  def return_type; end

  # The function is defined as singleton and instance method (as known as module_function)
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#46
  def singleton_instance; end

  # The function is defined as singleton and instance method (as known as module_function)
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#46
  def singleton_instance=(_arg0); end

  # : Annotations::SplatParamType?
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#129
  def splat_param_type_annotation; end

  # : Hash[Symbol, Types::t?]
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#110
  def var_type_hash; end

  # The visibility directly attached to the `def` node
  #
  # `nil` when the `def` node is not passed to `private`/`public` calls.
  #
  # ```rb
  # def foo() end            # <= nil
  # private def foo() end    # <= :private
  # ```
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#42
  def visibility; end
end

# source://rbs-inline//lib/rbs/inline/ast/members.rb#343
class RBS::Inline::AST::Members::RubyMixin < ::RBS::Inline::AST::Members::RubyBase
  include ::RBS::Inline::AST::Declarations::ConstantUtil

  # @return [RubyMixin] a new instance of RubyMixin
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#359
  def initialize(node, comments, application); end

  # Possible following type application annotation
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#353
  def application; end

  # Comments attached to the call node
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#350
  def comments; end

  # CallNode that calls `include`, `prepend`, and `extend` method
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#347
  def node; end

  # source://rbs-inline//lib/rbs/inline/ast/members.rb#371
  def rbs; end
end

# `private` call without arguments
#
# source://rbs-inline//lib/rbs/inline/ast/members.rb#492
class RBS::Inline::AST::Members::RubyPrivate < ::RBS::Inline::AST::Members::RubyBase
  # @return [RubyPrivate] a new instance of RubyPrivate
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#496
  def initialize(node); end

  # : Prism::CallNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#493
  def node; end
end

# `public` call without arguments
#
# source://rbs-inline//lib/rbs/inline/ast/members.rb#504
class RBS::Inline::AST::Members::RubyPublic < ::RBS::Inline::AST::Members::RubyBase
  # @return [RubyPublic] a new instance of RubyPublic
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#508
  def initialize(node); end

  # : Prism::CallNode
  #
  # source://rbs-inline//lib/rbs/inline/ast/members.rb#505
  def node; end
end

# @rbs!
#   type token = [Symbol, String]
#
#   type tree = token | Tree | Types::t | MethodType | nil
#
# source://rbs-inline//lib/rbs/inline/ast/tree.rb#11
class RBS::Inline::AST::Tree
  # @return [Tree] a new instance of Tree
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#19
  def initialize(type); end

  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#27
  def <<(tok); end

  # Children but without `tWHITESPACE` tokens
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#16
  def non_trivia_trees; end

  # Returns n-th method type from the children
  #
  # Raises if the value is not a method type or `nil`.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#202
  def nth_method_type(index); end

  # Returns n-th method tree from the children
  #
  # Raises if the value is not a method tree.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#234
  def nth_method_type!(index); end

  # Returns n-th method type from the children
  #
  # Returns `nil` if the value is not a method type.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#218
  def nth_method_type?(index); end

  # Returns n-th token from the children
  #
  # Raises if the value is not a token or nil.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#75
  def nth_token(index); end

  # Returns n-th token from the children
  #
  # Raises if the value is not token.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#107
  def nth_token!(index); end

  # Returns n-th token from the children
  #
  # Returns `nil` if the value is not a token.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#91
  def nth_token?(index); end

  # Returns n-th tree from the children
  #
  # Raises if the value is not a tree or nil.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#117
  def nth_tree(index); end

  # Returns n-th tree from the children
  #
  # Raises if the value is not a tree.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#149
  def nth_tree!(index); end

  # Returns n-th tree from the children
  #
  # Returns `nil` if the value is not a tree or nil.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#133
  def nth_tree?(index); end

  # Returns n-th type from the children
  #
  # Raises if the value is not a type or nil.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#160
  def nth_type(index); end

  # Returns n-th type from the children
  #
  # Raises if the value is not a type.
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#192
  def nth_type!(index); end

  # Returns n-th type from the children
  #
  # Returns `nil` if the value is not a type.
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#176
  def nth_type?(index); end

  # Returns the source code associated to the tree
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#36
  def to_s; end

  # Returns `true` if token at the given index is of the given type
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#56
  def token?(type, at:); end

  # Returns `true` if tree at the given index is of the given type
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#63
  def tree?(type, at:); end

  # : Array[tree]
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#12
  def trees; end

  # : Symbol
  #
  # source://rbs-inline//lib/rbs/inline/ast/tree.rb#13
  def type; end
end

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#3
class RBS::Inline::AnnotationParser
  include ::RBS::Inline::AnnotationParser::Tokens

  # @return [AnnotationParser] a new instance of AnnotationParser
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#108
  def initialize(input); end

  # : Array[Prism::Comment]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#105
  def input; end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#119
  def parse; end

  private

  # Test if the comment is an annotation comment
  #
  # - Returns `nil` if the comment is not an annotation.
  # - Returns `true` if the comment is `#:` or `#[` annotation. (Offset is `1`)
  # - Returns Integer if the comment is `#@rbs` annotation. (Offset is the number of leading spaces including `#`)
  #
  # : (Prism::Comment) -> (Integer | true | nil)
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#159
  def annotation_comment?(comment); end

  # Split lines of comments in `result` into paragraphs
  #
  # A paragraph consists of:
  #
  # * An annotation syntax constructs -- starting with `@rbs` or `::`, or
  # * A lines something else
  #
  # Yields an array of comments, and a boolean indicating if the comments may be an annotation.
  #
  # : (ParsingResult) { (Array[Prism::Comment], bool is_annotation) -> void } -> void
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#182
  def each_annotation_paragraph(result, &block); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#299
  def parse_annotation(comments); end

  # : (Tokenizer) -> AST::Tree
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#873
  def parse_block_type(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#917
  def parse_class_decl(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#438
  def parse_comment(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#801
  def parse_generic(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#639
  def parse_inherits(tokenizer); end

  # : (Tokenizer) -> AST::Tree
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#837
  def parse_ivar_type(tokenizer); end

  # Parse a RBS method type
  #
  # If parsing failed, it returns a Tree(`:type_syntax_error), consuming all of the remaining input.
  #
  # Note that this doesn't recognize `--` comment unlike `parse_type`.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#567
  def parse_method_type(tokenizer, parent_tree); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#488
  def parse_method_type_annotation(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#898
  def parse_module_decl(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#939
  def parse_module_name(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#753
  def parse_module_self(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#976
  def parse_module_selfs(tokenizer); end

  # Yield the block and return the resulting tree if tokenizer has current token of `types`
  #
  # ```rb
  # # Test if tokenize has `--` token, then parse comment or insert `nil` to tree
  #
  # tree << parse_optional(tokenizer, K_MINUS2) do
  #   parse_comment(tokenizer)
  # end
  # ```
  #
  # If `tree:` is given, it consumes trivia tokens before yielding the block.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#790
  def parse_optional(tokenizer, *types, tree: T.unsafe(nil), &block); end

  # Parse `@rbs override` annotation
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#656
  def parse_override(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#626
  def parse_rbs_annotation(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#423
  def parse_return_type_decl(tokenizer); end

  # : (Tokenizer) -> AST::Tree
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#856
  def parse_splat_param_type(tokenizer); end

  # Parse a RBS type and returns it
  #
  # If parsing failed, it returns a Tree(`:type_syntax_error), consuming
  #
  # 1. All of the input with `--` token if exists (for comments)
  # 2. All of the input (for anything else)
  #
  # ```
  # Integer -- Foo        # => Returns `Integer`, tokenizer has `--` as its current token
  # Integer[ -- Foo       # => Returns a tree for `Integer[`, tokenizer has `--` as its current token
  # Integer[ Foo          # => Returns a tree for `Integer[ Foo`, tokenizer is at the end of the input
  # ```
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#606
  def parse_type(tokenizer, parent_tree); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#452
  def parse_type_app(tokenizer); end

  # Parse a RBS method type or type and returns it
  #
  # It tries parsing a method type, and then parsing a type if failed.
  #
  # If both parsing failed, it returns a Tree(`:type_syntax_error), consuming all of the remaining input.
  #
  # Note that this doesn't recognize `--` comment unlike `parse_type`.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#528
  def parse_type_method_type(tokenizer, parent_tree); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#816
  def parse_type_param(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#955
  def parse_type_params(tokenizer); end

  # Parse `@rbs use [CLAUSES]` annotation
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#671
  def parse_use(tokenizer); end

  # Parses use clause
  #
  # Returns one of the following form:
  #
  # * [`::`?, [UIDENT, `::`]*, LIDENT, [`as` LIDENT]?]
  # * [`::`?, [UIDENT, `::`]*, UIDENT, [`as` UIDENT]?]
  # * [`::`?, [UIDENT, `::`]*, IFIDENT, [`as`, IFIDENT]?]
  # * [`::`?, [UIDENT) `::`]*, `*`]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#703
  def parse_use_clause(tokenizer); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#399
  def parse_var_decl(tokenizer); end

  # The first annotation line is already detected and consumed.
  # The annotation comment is already in `comments`.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#195
  def yield_annotation(comments, lines, offset, allow_empty_lines:, &block); end

  # Consumes empty lines between annotation lines
  #
  # An empty line is already detected and consumed.
  # The line is already removed from `lines` and put in `empty_comments`.
  #
  # Note that the arguments, `comments`, `empty_comments`, and `lines` are modified in place.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#268
  def yield_empty_annotation(comments, empty_comments, lines, offset, &block); end

  # The first line is NOT consumed.
  #
  # The `comments` may be empty.
  #
  # @yield [comments, false]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#234
  def yield_paragraph(comments, lines, &block); end

  class << self
    # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#114
    def parse(input); end
  end
end

# ParsingResut groups consecutive comments, which may contain several annotations
#
# *Consecutive comments* are comments are defined in below.
# They are basically comments that follows from the previous line, but there are some more requirements.
#
# ```ruby
# # Line 1
# # Line 2           #=> Line 1 and Line 2 are consecutive
#
#    # Line 3
#  # Line4           #=> Line 3 and Line 4 are not consecutive, because the starting column are different
#
#         # Line 5
# foo()   # Line 6   #=> Line 5 and Line 6 are not consecutive, because Line 6 has leading code
# ```
#
# source://rbs-inline//lib/rbs/inline/annotation_parser.rb#22
class RBS::Inline::AnnotationParser::ParsingResult
  # @return [ParsingResult] a new instance of ParsingResult
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#42
  def initialize(first_comment); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#65
  def add_comment(comment); end

  # : Array[AST::Annotations::t | AST::CommentLines]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#24
  def annotations; end

  # : Array[Prism::Comment]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#23
  def comments; end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#80
  def content(trim: T.unsafe(nil)); end

  # : () { (AST::Annotations::t) -> void } -> void
  # : () -> Enumerator[AST::Annotations::t, void]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#29
  def each_annotation(&block); end

  # : Integer
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#25
  def first_comment_offset; end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#59
  def last_comment; end

  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#51
  def line_range; end

  # : Array[String]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser.rb#98
  def lines; end
end

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#67
class RBS::Inline::AnnotationParser::Tokenizer
  include ::RBS::Inline::AnnotationParser::Tokens

  # @return [Tokenizer] a new instance of Tokenizer
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#161
  def initialize(scanner); end

  # Advances the scanner
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#172
  def advance(tree, eat: T.unsafe(nil)); end

  # Consume given token type and inserts the token to the tree or `nil`
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#279
  def consume_token(*types, tree:); end

  # Consume given token type and inserts the token to the tree or raise
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#292
  def consume_token!(*types, tree:); end

  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#221
  def consume_trivias(tree); end

  # Returns the current char position of the first lookahead token
  #
  # ```
  # __ foo ___ bar baz
  # ^^                 Trivia tokens before lookahead1
  #   ^                #current_position
  #    ^^^             lookahead1
  #        ^^^         Trivia tokens between lookahead1 and lookahead2
  #            ^^^     lookahead2
  #                ^    <= scanner.charpos
  # ```
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#147
  def current_position; end

  # Token that comes after the current position
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#125
  def lookahead1; end

  # Token that comes after `lookahead1`
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#131
  def lookahead2; end

  # Tokens that comes after the current position
  #
  # This is a four tuple of tokens.
  #
  # 1. The first array is a trivia tokens before current position
  # 2. The second token is the first lookahead token after the current position
  # 3. The third array is a trivia tokens between the first lookahead and the second lookahead
  # 4. The fourth token is the second lookahead token
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#121
  def lookahead_tokens; end

  # : Array[Symbol?]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#155
  def lookaheads; end

  # Skips characters
  #
  # This method ensures the `current_position` will be the given `position`.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#245
  def reset(position, tree); end

  # : String
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#264
  def rest; end

  # : StringScanner
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#110
  def scanner; end

  # Reset the current_token to incoming comment `--`
  #
  # Reset to the end of the input if `--` token cannot be found.
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#326
  def skip_to_comment; end

  # Returns true if the scanner cannot consume next token
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#234
  def stuck?; end

  # Ensure current token is one of the specified in types
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#317
  def type!(*types); end

  # Test if lookahead2 token have specified `type`
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#309
  def type2?(*types); end

  # Test if current token has specified `type`
  #
  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#301
  def type?(*types); end
end

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#70
RBS::Inline::AnnotationParser::Tokenizer::KEYWORDS = T.let(T.unsafe(nil), Hash)

# : Hash[String, Symbol]
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#87
RBS::Inline::AnnotationParser::Tokenizer::KW_RE = T.let(T.unsafe(nil), Regexp)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#89
RBS::Inline::AnnotationParser::Tokenizer::PUNCTS = T.let(T.unsafe(nil), Hash)

# : Hash[String, Symbol]
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#108
RBS::Inline::AnnotationParser::Tokenizer::PUNCTS_RE = T.let(T.unsafe(nil), Regexp)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#4
module RBS::Inline::AnnotationParser::Tokens; end

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#34
RBS::Inline::AnnotationParser::Tokens::K_AMP = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#31
RBS::Inline::AnnotationParser::Tokens::K_ARROW = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#7
RBS::Inline::AnnotationParser::Tokens::K_AS = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#19
RBS::Inline::AnnotationParser::Tokens::K_CLASS = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#21
RBS::Inline::AnnotationParser::Tokens::K_COLON = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#20
RBS::Inline::AnnotationParser::Tokens::K_COLON2 = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#24
RBS::Inline::AnnotationParser::Tokens::K_COMMA = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#30
RBS::Inline::AnnotationParser::Tokens::K_DOT = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#29
RBS::Inline::AnnotationParser::Tokens::K_DOT3 = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#38
RBS::Inline::AnnotationParser::Tokens::K_EOF = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#11
RBS::Inline::AnnotationParser::Tokens::K_GENERIC = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#12
RBS::Inline::AnnotationParser::Tokens::K_IN = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#6
RBS::Inline::AnnotationParser::Tokens::K_INHERITS = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#32
RBS::Inline::AnnotationParser::Tokens::K_LBRACE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#22
RBS::Inline::AnnotationParser::Tokens::K_LBRACKET = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#33
RBS::Inline::AnnotationParser::Tokens::K_LPAREN = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#28
RBS::Inline::AnnotationParser::Tokens::K_LT = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#27
RBS::Inline::AnnotationParser::Tokens::K_MINUS2 = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#18
RBS::Inline::AnnotationParser::Tokens::K_MODULE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#10
RBS::Inline::AnnotationParser::Tokens::K_MODULE_SELF = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#13
RBS::Inline::AnnotationParser::Tokens::K_OUT = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#8
RBS::Inline::AnnotationParser::Tokens::K_OVERRIDE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#35
RBS::Inline::AnnotationParser::Tokens::K_QUESTION = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#23
RBS::Inline::AnnotationParser::Tokens::K_RBRACKET = T.let(T.unsafe(nil), Symbol)

# `@rbs`
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#44
RBS::Inline::AnnotationParser::Tokens::K_RBS = T.let(T.unsafe(nil), Symbol)

# `@rbs!`
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#41
RBS::Inline::AnnotationParser::Tokens::K_RBSE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#5
RBS::Inline::AnnotationParser::Tokens::K_RETURN = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#15
RBS::Inline::AnnotationParser::Tokens::K_SELF = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#16
RBS::Inline::AnnotationParser::Tokens::K_SKIP = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#26
RBS::Inline::AnnotationParser::Tokens::K_STAR = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#25
RBS::Inline::AnnotationParser::Tokens::K_STAR2 = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#14
RBS::Inline::AnnotationParser::Tokens::K_UNCHECKED = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#9
RBS::Inline::AnnotationParser::Tokens::K_USE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#36
RBS::Inline::AnnotationParser::Tokens::K_VBAR = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#17
RBS::Inline::AnnotationParser::Tokens::K_YIELDS = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#63
RBS::Inline::AnnotationParser::Tokens::T_ANNOTATION = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#62
RBS::Inline::AnnotationParser::Tokens::T_ATIDENT = T.let(T.unsafe(nil), Symbol)

# Block type source
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#57
RBS::Inline::AnnotationParser::Tokens::T_BLOCKSTR = T.let(T.unsafe(nil), Symbol)

# The body of comment string following `--`
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#51
RBS::Inline::AnnotationParser::Tokens::T_COMMENT = T.let(T.unsafe(nil), Symbol)

# `!` local variable
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#60
RBS::Inline::AnnotationParser::Tokens::T_ELVAR = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#47
RBS::Inline::AnnotationParser::Tokens::T_IFIDENT = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#48
RBS::Inline::AnnotationParser::Tokens::T_LVAR = T.let(T.unsafe(nil), Symbol)

# Type/method type source
#
# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#54
RBS::Inline::AnnotationParser::Tokens::T_SOURCE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#46
RBS::Inline::AnnotationParser::Tokens::T_UIDENT = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/annotation_parser/tokenizer.rb#64
RBS::Inline::AnnotationParser::Tokens::T_WHITESPACE = T.let(T.unsafe(nil), Symbol)

# source://rbs-inline//lib/rbs/inline/node_utils.rb#5
module RBS::Inline::NodeUtils
  # source://rbs-inline//lib/rbs/inline/node_utils.rb#8
  def type_name(node); end
end

# source://rbs-inline//lib/rbs/inline/parser.rb#7
class RBS::Inline::Parser < ::Prism::Visitor
  # : void
  #
  # @return [Parser] a new instance of Parser
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#43
  def initialize; end

  # Fetch Application annotation which is associated to `node`
  #
  # The application annotation is removed from `comments`.
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#405
  def application_annotation(node); end

  # Fetch TypeAssertion annotation which is associated to `node`
  #
  # The assertion annotation is removed from `comments`.
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#424
  def assertion_annotation(node); end

  # ParsingResult associated with the line number at the end
  #
  # ```rb
  # # Hello
  # # world       <= The comments hash includes `2` (line 2) to the two lines
  # ```
  #
  # > [!IMPORTANT]
  # > The values will be removed during parsing.
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#31
  def comments; end

  # source://rbs-inline//lib/rbs/inline/parser.rb#121
  def current_class_module_decl; end

  # source://rbs-inline//lib/rbs/inline/parser.rb#126
  def current_class_module_decl!; end

  # The current module_function applied to single `def` node
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#41
  def current_module_function; end

  # The current visibility applied to single `def` node
  #
  # Assuming it's directly inside `private` or `public` calls.
  # `nil` when the `def` node is not inside `private` or `public` calls.
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#38
  def current_visibility; end

  # The top level declarations
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#15
  def decls; end

  # @return [Boolean]
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#391
  def ignored_node?(node); end

  # Returns an array of annotations from comments that is located between start_line and end_line
  #
  # ```rb
  # module Foo        # line 1 (start_line)
  #   # foo
  #   # bar
  # end               # line 4 (end_line)
  # ```
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#236
  def inner_annotations(start_line, end_line); end

  # Load inner declarations and delete them from `#comments` hash
  #
  # It also sorts the `members` by `#start_line`` ascending.
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#157
  def load_inner_annotations(start_line, end_line, members); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#380
  def process_nesting_node(node); end

  # : (with_members) { () -> void } -> void
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#131
  def push_class_module_decl(decl); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#368
  def push_visibility(new_visibility, &block); end

  # The surrounding declarations
  #
  # source://rbs-inline//lib/rbs/inline/parser.rb#19
  def surrounding_decls; end

  # source://rbs-inline//lib/rbs/inline/parser.rb#265
  def visit_alias_method_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#488
  def visit_block_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#277
  def visit_call_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#175
  def visit_class_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#443
  def visit_constant_write_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#248
  def visit_def_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#210
  def visit_module_node(node); end

  # source://rbs-inline//lib/rbs/inline/parser.rb#196
  def visit_singleton_class_node(node); end

  class << self
    # Parses the given Prism result to a three tuple
    #
    # Returns a three tuple of:
    #
    # 1. An array of `use` directives
    # 2. An array of declarations
    # 3. An array of RBS declarations given as `@rbs!` annotation at top-level
    #
    # Note that only RBS declarations are allowed in the top-level `@rbs!` annotations.
    # RBS *members* are ignored in the array.
    #
    # source://rbs-inline//lib/rbs/inline/parser.rb#64
    def parse(result, opt_in:); end
  end
end

# source://rbs-inline//lib/rbs/inline/version.rb#5
RBS::Inline::VERSION = T.let(T.unsafe(nil), String)

# source://rbs-inline//lib/rbs/inline/writer.rb#7
class RBS::Inline::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#21
  def initialize(buffer = T.unsafe(nil)); end

  # : Types::t
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#18
  def default_type; end

  # : Types::t
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#18
  def default_type=(_arg0); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#40
  def header(*lines); end

  # @rbs!
  #   interface _Content
  #     def <<: (RBS::AST::Declarations::t | RBS::AST::Members::t) -> void
  #
  #     def concat: (Array[RBS::AST::Declarations::t | RBS::AST::Members::t]) -> void
  #   end
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#15
  def output; end

  # source://rbs-inline//lib/rbs/inline/writer.rb#106
  def translate_class_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#181
  def translate_constant_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#198
  def translate_data_assign_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#79
  def translate_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#466
  def translate_member(member, decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#132
  def translate_members(members, decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#154
  def translate_module_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#453
  def translate_singleton_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#314
  def translate_struct_assign_decl(decl, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#52
  def write(uses, decls, rbs_decls); end

  # : RBS::Writer
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#16
  def writer; end

  private

  # source://rbs-inline//lib/rbs/inline/writer.rb#628
  def constant_decl_to_type(decl); end

  # Returns the `kind` of the method definition
  #
  # ```rb
  # def self.foo = ()    # :singleton
  # class A
  #   class << self
  #     def bar = ()     # :singleton
  #   end
  # end
  #
  # def object.foo = ()  # Not supported (returns :instance)
  # ```
  #
  # source://rbs-inline//lib/rbs/inline/writer.rb#556
  def method_kind(member, decl); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#601
  def translate_class_block_decl(block, rbs); end

  # source://rbs-inline//lib/rbs/inline/writer.rb#571
  def translate_module_block_decl(block, rbs); end

  class << self
    # @yield [writer]
    #
    # source://rbs-inline//lib/rbs/inline/writer.rb#31
    def write(uses, decls, rbs_decls, &_arg3); end
  end
end
