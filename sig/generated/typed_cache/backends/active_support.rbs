# Generated from lib/typed_cache/backends/active_support.rb with RBS::Inline

module TypedCache
  module Backends
    # Adapter that wraps any ActiveSupport::Cache::Store to work with TypedCache
    # @rbs generic V
    class ActiveSupport[V]
      include Backend[V]

      attr_reader cache_store: ::ActiveSupport::Cache::Store

      attr_reader default_options: Hash[Symbol, top]

      # : (::ActiveSupport::Cache::Store, ?Hash[Symbol, top]) -> void
      def initialize: (::ActiveSupport::Cache::Store, ?Hash[Symbol, top]) -> void

      # @rbs override
      # : (cache_key, **top) -> V?
      def read: ...

      # @rbs override
      # : (cache_key, V, **top) -> V
      def write: ...

      # @rbs override
      # : (Hash[cache_key, V], **top) -> Array[V]
      def write_all: ...

      # @rbs override
      # : (cache_key) -> V?
      def delete: ...

      # @rbs override
      # : (Array[cache_key], **top) -> Hash[cache_key, V]
      def read_all: ...

      # @rbs override
      # : (cache_key, **top) { () -> V? } -> V?
      def fetch: ...

      # @rbs override
      # : (Array[cache_key], **top) { (CacheKey) -> V? } -> Hash[cache_key, V]
      def fetch_all: ...

      # @rbs override
      # : (cache_key) -> bool
      def key?: ...

      # @rbs override
      # : -> void
      def clear: ...

      # : (Hash[Symbol, top]) -> ActiveSupport[V]
      def with_options: (Hash[Symbol, top]) -> ActiveSupport[V]

      # : -> ::ActiveSupport::Cache::Store
      def raw_cache: () -> ::ActiveSupport::Cache::Store
    end
  end
end
