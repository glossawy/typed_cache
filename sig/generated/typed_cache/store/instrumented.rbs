# Generated from lib/typed_cache/store/instrumented.rb with RBS::Inline

module TypedCache
  # Decorator that adds instrumentation to any Store implementation
  # This decorator can wrap any store to add ActiveSupport::Notifications
  # @rbs generic V
  class Store::Instrumented[V]
    include Decorator[V]

    extend Forwardable

    attr_reader store: TypedCache::Store[V]

    # @rbs (Symbol, ?operation: String) ?{ (*untyped, **untyped) -> String } -> void
    private def self.instrument: (Symbol, ?operation: String) ?{ (*untyped, **untyped) -> String } -> void

    # : (TypedCache::Store[V]) -> void
    def initialize: (TypedCache::Store[V]) -> void

    # @rbs override
    # : -> String
    def namespace: ...

    # @rbs override
    # : -> String
    def store_type: ...

    # @rbs override
    # : (cache_key) -> either[Error, CacheRef[V]]
    def ref: ...

    # Additional methods that might exist on the wrapped store
    def respond_to_missing?: (untyped method_name, ?untyped include_private) -> untyped

    def method_missing: (untyped method_name, *untyped args) ?{ (?) -> untyped } -> untyped
  end
end
