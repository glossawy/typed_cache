# Generated from lib/typed_cache/cache_builder.rb with RBS::Inline

module TypedCache
  class CacheBuilder
    type config = TypedCache::typed_cache_config

    type instrumenter_source = :default | :dry | :rails | Instrumenter

    class BackendConfig < Dry::Struct
    end

    class DecoratorConfig < Dry::Struct
    end

    # @rbs (config, Registry[backend[untyped]], Registry[decorator[untyped]]) -> void
    def initialize: (config, Registry[backend[untyped]], Registry[decorator[untyped]]) -> void

    # Builds the cache - the only method that can fail
    # @rbs (?Namespace) -> either[Error, Store[V]]
    def build: (?Namespace) -> either[Error, Store[V]]

    # Familiar Ruby fluent interface - always succeeds
    # Invalid configurations are caught during build()
    # @rbs (Symbol, *untyped, **untyped) -> self
    def with_backend: (Symbol, *untyped, **untyped) -> self

    # Adds an arbitrary decorator by registry key
    # @rbs (Symbol) -> self
    def with_decorator: (Symbol) -> self

    # Adds instrumentation using the specified strategy.
    # @rbs (instrumenter_source) -> either[Error, self]
    def with_instrumentation: (instrumenter_source) -> either[Error, self]

    private

    # @rbs (Namespace) -> either[Error, Store[V]]
    def validate_and_build: (Namespace) -> either[Error, Store[V]]

    # @rbs (Namespace) -> either[Error, Store[V]]
    def create_store: (Namespace) -> either[Error, Store[V]]

    # @rbs (Store[V]) -> either[Error, Store[V]]
    def apply_decorators: (Store[V]) -> either[Error, Store[V]]

    def apply_instrumentation: (untyped store) -> untyped
  end
end
