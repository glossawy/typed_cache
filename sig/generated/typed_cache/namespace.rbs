# Generated from lib/typed_cache/namespace.rb with RBS::Inline

module TypedCache
  # Provides a type-safe, composable namespace abstraction for cache keys.
  #
  # The Namespace class allows you to create hierarchical namespaces for cache keys,
  # ensuring that keys are properly scoped and collisions are avoided. Each Namespace
  # instance can generate cache keys (via #key), create nested namespaces (via #nested),
  # and traverse to parent namespaces (via #parent_namespace).
  #
  # Example:
  #   ns = TypedCache::Namespace.at("users")
  #   ns.key("123") # => #<TypedCache::CacheKey namespace=users key=123>
  #   ns2 = ns.nested("sessions")
  #   ns2.key("abc") # => #<TypedCache::CacheKey namespace=users:sessions key=abc>
  #
  # Namespaces are composable and immutable. The key factory can be customized for advanced use cases.
  class Namespace
    # Returns a new Namespace instance rooted at the given namespace string.
    #
    # @param namespace [String] the root namespace
    # @return [Namespace] a new Namespace instance at the given root
    #
    # Example:
    #   TypedCache::Namespace.at("users") # => #<TypedCache::Namespace namespace=users>
    #
    # The returned Namespace can be further nested or used to generate cache keys.
    #
    # @rbs (String) -> Namespace
    def self.at: (String) -> Namespace

    # Returns the root Namespace instance (with an empty namespace).
    #
    # @return [Namespace] the root Namespace
    #
    # Example:
    #   TypedCache::Namespace.root # => #<TypedCache::Namespace namespace=>
    #
    # The root namespace is useful as a starting point for building nested namespaces.
    #
    # @rbs () -> Namespace
    def self.root: () -> Namespace

    # Initializes a new Namespace instance with the given namespace string and key factory.
    #
    # @param namespace [String] the namespace string for this instance
    # @param key_factory [Proc] a block that creates CacheKey instances from key strings
    # @yield [key] the key string to create a CacheKey from
    # @yieldreturn [CacheKey] the created cache key
    #
    # Example:
    #   Namespace.new("users") { |key| CacheKey.new("users", key) }
    #
    # @rbs (String) { (Namespace, String) -> CacheKey } -> void
    def initialize: (String) { (Namespace, String) -> CacheKey } -> void

    # Creates a nested namespace by appending the given namespace to the current one.
    #
    # @param namespace [String] the namespace to append
    # @param key_factory [Proc, nil] optional custom key factory for the nested namespace
    # @return [Namespace] a new Namespace instance with the combined namespace
    #
    # Example:
    #   ns = Namespace.at("users")
    #   ns.nested("sessions") # => #<TypedCache::Namespace namespace=users:sessions>
    #
    # If no key_factory is provided, the parent's key factory is inherited.
    #
    # @rbs (String) ?{ (Namespace, String) -> CacheKey } -> Namespace
    def nested: (String) ?{ (Namespace, String) -> CacheKey } -> Namespace

    # Returns the parent namespace by removing the last namespace segment.
    #
    # @return [Namespace] the parent namespace, or self if already at root
    #
    # Example:
    #   ns = Namespace.at("users:sessions")
    #   ns.parent_namespace # => #<TypedCache::Namespace namespace=users>
    #
    # For root namespaces (empty string), returns self.
    #
    # @rbs () -> Namespace
    def parent_namespace: () -> Namespace

    # Creates a cache key using the namespace's key factory.
    #
    # @param key [String] the key string to create a cache key from
    # @return [CacheKey] the created cache key
    #
    # Example:
    #   ns = Namespace.at("users")
    #   ns.key("123") # => #<TypedCache::CacheKey namespace=users key=123>
    #
    # @rbs (String) -> CacheKey
    def key: (String) -> CacheKey

    # @rbs () -> bool
    def root?: () -> bool

    # Returns the namespace string representation.
    #
    # @return [String] the namespace string
    #
    # Example:
    #   ns = Namespace.at("users:sessions")
    #   ns.to_s # => "users:sessions"
    #
    # @rbs () -> String
    def to_s: () -> String

    # Returns a string representation of the Namespace instance for debugging.
    #
    # @return [String] a debug-friendly string representation
    #
    # Example:
    #   ns = Namespace.at("users")
    #   ns.inspect # => "#<TypedCache::Namespace namespace=users>"
    #
    # @rbs () -> String
    def inspect: () -> String

    # @rbs () -> Integer
    def hash: () -> Integer

    # @rbs (Object) -> bool
    def ==: (Object) -> bool

    alias eql? ==
  end
end
